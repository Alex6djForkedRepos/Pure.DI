// <auto-generated/>
#pragma warning disable

namespace Pure.DI.MS;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
internal class ServiceProviderFactory<TComposition>: IServiceProviderFactory<IServiceCollection>
    where TComposition: ServiceProviderFactory<TComposition>
{
    protected const string Base = $"Pure.DI.MS.ServiceProviderFactory";
    private static readonly ServiceCollectionFactory<TComposition> ServiceCollectionFactory = new();
    private volatile IServiceProvider? _serviceProvider;
    
    [global::System.Diagnostics.Conditional("A2768DE22DE3E430C9653990D516CC9B")]
    private static void HintsSetup() =>
        DI.Setup(Base, CompositionKind.Internal)
            .Hint(Hint.OnCannotResolve, "On")
            .Hint(Hint.OnCannotResolvePartial, "Off")
            .Hint(Hint.OnNewRoot, "On")
            .Hint(Hint.OnNewRootPartial, "Off");

#if NETSTANDARD2_0_OR_GREATER || NETCOREAPP || NET40_OR_GREATER
    [global::System.Diagnostics.Contracts.Pure]
#endif
    [global::System.Runtime.CompilerServices.MethodImpl((global::System.Runtime.CompilerServices.MethodImplOptions)0x300)]
    protected static IServiceCollection CreateServiceCollection(TComposition composition) =>
        ServiceCollectionFactory.CreateServiceCollection(composition);

    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl((global::System.Runtime.CompilerServices.MethodImplOptions)0x300)]
    public IServiceCollection CreateBuilder(IServiceCollection services) =>
        // Registers composition roots as services in the service collection
        services.Add(CreateServiceCollection((TComposition)this));

    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl((global::System.Runtime.CompilerServices.MethodImplOptions)0x300)]
    public IServiceProvider CreateServiceProvider(IServiceCollection services)
    {
        var serviceProvider = services.BuildServiceProvider();
        // Saves the service provider to use it to resolve dependencies external
        // to this composition from the service provider 
        _serviceProvider ??= services.BuildServiceProvider();
        return serviceProvider;
    }

    // Obtaining external dependencies from the service provider
    [global::System.Runtime.CompilerServices.MethodImpl((global::System.Runtime.CompilerServices.MethodImplOptions)0x300)]
    protected T OnCannotResolve<T>(object? tag, Lifetime lifetime) =>
        _serviceProvider.GetRequiredService<T>();

    // Registers the composition resolvers for use in a service collection
    [global::System.Runtime.CompilerServices.MethodImpl((global::System.Runtime.CompilerServices.MethodImplOptions)0x300)]
    protected static void OnNewRoot<TContract, T>(
        IResolver<TComposition, TContract> resolver,
        string name, object? tag, Lifetime lifetime) => 
        ServiceCollectionFactory.AddResolver(resolver);
}

#pragma warning restore
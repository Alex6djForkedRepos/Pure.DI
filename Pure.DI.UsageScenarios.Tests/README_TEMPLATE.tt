<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".md" #>

<#
    var currentPath = Host.ResolvePath("");
    var solutionPath = Path.Combine(currentPath, "..");

    var infos = new List<Dictionary<string, string>>();
    foreach(var file in Directory.GetFiles(currentPath, "*.cs"))
    {
        var isBody = false;
        var vars = new Dictionary<string, string>();
        var body = new StringBuilder();
        var bodyOffset = -1;
        foreach(var line in File.ReadAllLines(file))
        {
            if (vars.Count == 0)
            {
                vars["visible"] = "false";
                vars["tag"] = string.Empty;
                vars["priority"] = string.Empty;
                vars["description"] = string.Empty;
                vars["header"] = string.Empty;
                vars["footer"] = string.Empty;
                vars["file"] = file;
                vars["url"] = "https://raw.githubusercontent.com/DevTeam/IoCContainer/master/IoC.Tests/UsageScenarios/" + Path.GetFileName(file);
                infos.Add(vars);
            }

            var str = line.Trim();
            switch (str)
            {
                case "// {":
                    isBody = true;
                    bodyOffset = line.Length - line.TrimStart().Length;
                    continue;
                
                case "// }":
                    isBody = false;
                    continue;
            }

            if (str.StartsWith("// $"))
            {
                var parts = str.Substring(4, str.Length - 4).Split('=');
                if (parts.Length == 2)
                {
                    var key = parts[0];
                    if (key is "header" or "footer")
                    {
                        var curVar = vars[key];
                        if (curVar != string.Empty)
                        {
                            curVar += "\n";
                        }

                        vars[key] = curVar + parts[1];
                    }
                    else
                    {
                        vars[key] = parts[1];
                    }
                }

                continue;
            }

            if (isBody)
            {
                body.AppendLine(bodyOffset < line.Length ? line.Substring(bodyOffset, line.Length - bodyOffset) : line.TrimStart());
            }
        }

        vars["body"] = body.ToString();
    }#>
## Usage Scenarios

<#
    foreach(var group in infos.Where(info => info["visible"] == "true").GroupBy(i => i["tag"]).OrderBy(i => i.Key[0]))
    {
        var groupName = group.Key.Substring(1).Trim();
    #>- <#=groupName#>
<#
        foreach(var info in group.OrderBy(i => i["priority"] + "_" + i["description"]))
        {
            var description = info["description"];
            var reference = "#" + description.Replace(" ", "-").Replace("'", string.Empty).ToLowerInvariant();
#>  - [<#=description#>](<#=reference#>)
<#
        }
    }
#>

<#
    foreach(var info in infos.OrderBy(i => i["tag"] + i["priority"]).Where(info => info["visible"] == "true"))
    {
#>### <#=info["description"]#>

<#=info["header"]#>

``` CSharp
<#=info["body"]#>```

<#=info["footer"]#>

<#
    }

    var readmeBodyFile = Path.Combine(solutionPath, "README_BODY.md");
    var readmeFile = Path.Combine(solutionPath, "README.md");
    var samplesFile = Path.Combine(currentPath, "README_TEMPLATE.md");
    
    File.Copy(readmeBodyFile, readmeFile, true);

    var samplesContent = File.ReadAllText(samplesFile);
    File.AppendAllText(readmeFile, samplesContent);    
#>

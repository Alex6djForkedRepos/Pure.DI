// ReSharper disable ClassNeverInstantiated.Global
namespace Pure.DI.Core.Code;

internal class TagClassBuilder(
    IInformation information,
    ISmartTags smartTags,
    IFormatter formatter,
    IComments comments,
    CancellationToken cancellationToken)
    : IBuilder<TagContext, TagCode>
{
    public TagCode Build(TagContext tagContext)
    {
        var tagToDependencies = (
            from composition in tagContext.Compositions
            from dependency in composition.Source.Graph.Edges
            where dependency.Injection.Tag is string
            group (composition, dependency) by (string)dependency.Injection.Tag!
        ).ToDictionary(i => i.Key, i => i.ToList());

        cancellationToken.ThrowIfCancellationRequested();

        var code = new LinesBuilder();
        var tags = smartTags.GetAll();
        // ReSharper disable once InvertIf
        code.AppendLine("// <auto-generated/>");
        code.AppendLine($"// by {information.Description}");

        code.AppendLine($"namespace {Names.GeneratorName}");
        code.AppendLine("{");
        using (code.Indent())
        {
            code.AppendLine($"internal partial class {nameof(Tag)}");
            code.AppendLine("{");
            using (code.Indent())
            {
                var isFirst = true;
                foreach (var tag in tags)
                {
                    if (isFirst)
                    {
                        isFirst = false;
                    }
                    else
                    {
                        code.AppendLine();
                    }

                    code.AppendLine("/// <summary>");
                    code.AppendLine($"/// Atomically generated smart tag with value {comments.Escape(tag.Name.ValueToString())}.");
                    if (tagToDependencies.TryGetValue(tag.Name, out var dependencies))
                    {
                        code.AppendLine("/// Used by:");
                        code.AppendLine("/// <br/>");
                        var groupByComposition = dependencies.GroupBy(i => i.composition.Source.Source.Name.FullName);
                        foreach (var compositionGroup in groupByComposition)
                        {
                            code.AppendLine("/// <br/>");
                            code.AppendLine($"/// class {formatter.FormatRef(compositionGroup.Key)}");
                            code.AppendLine("/// <list type=\"bullet\">");
                            foreach (var (_, (_, dependencyNode, injection, target)) in compositionGroup
                                         .OrderBy(i => i.dependency.Target.Binding.Id)
                                         .ThenBy(i => i.dependency.Source.Binding.Id))
                            {
                                var tagStr = comments.Escape(injection.Tag != null && injection.Tag is not MdTagOnSites ? $"({injection.Tag})" : "");
                                code.AppendLine($"/// <item>{formatter.FormatRef(target.Type)} &lt;-- {formatter.FormatRef(injection.Type)}{tagStr} -- {formatter.FormatRef(dependencyNode.Type)} </item>");
                            }

                            code.AppendLine("/// </list>");
                        }
                    }

                    code.AppendLine("/// </summary>");
                    code.AppendLine($"public const string {tag.Name} = {tag.Name.ValueToString()};");
                }
            }

            code.AppendLine("}");
        }

        code.AppendLine("}");

        return new TagCode(code);
    }
}
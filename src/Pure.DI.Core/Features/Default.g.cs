// <auto-generated/>
namespace Pure.DI.Features
{
    internal static class Default
    {
        private static void Setup()
        {
            DI.Setup("", ComposerKind.Global)
                .TypeAttribute<TypeAttribute>()
                .TagAttribute<TagAttribute>()
                .OrderAttribute<OrderAttribute>()
                
                .Bind<System.Func<TT>>()
                .AnyTag()
                .To(ctx => new System.Func<TT>(() =>
                {
                    TT value;
                    ctx.Inject<TT>(out value);
                    return value;
                }))
                .Bind<System.Lazy<TT>>()
                .AnyTag()
                .To(ctx =>
                {
                    System.Func<TT> func;
                    ctx.Inject<System.Func<TT>>(out func);
                    return new System.Lazy<TT>(func, true);
                })
                .Bind<System.Lazy<TT, TT1>>()
                .AnyTag()
                .To(ctx =>
                {
                    System.Func<TT> func;
                    ctx.Inject<System.Func<TT>>(out func);
                    TT1 metadata;
                    ctx.Inject<TT1>(out metadata);
                    return new System.Lazy<TT, TT1>(func, metadata, true);
                })
                .Bind<System.Threading.Tasks.Task<TT>>()
                .AnyTag()
                .To<System.Threading.Tasks.Task<TT>>();
        }
    }
}
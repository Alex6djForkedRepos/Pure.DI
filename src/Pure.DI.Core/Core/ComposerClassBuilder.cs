namespace Pure.DI.Core;

internal class ComposerClassBuilder : IBuilder<DependencyGraph, string>
{
    private const string MethodImplOptions = "[System.Runtime.CompilerServices.MethodImpl((System.Runtime.CompilerServices.MethodImplOptions)0x300)]";
    private const string DisposableTypeName = "System.IDisposable";
    private const string ParentComposerArgName = "parent";
    private readonly IBuilder<DependencyGraph, IReadOnlyDictionary<Injection, Root>> _rootsBuilder;
    private readonly IBuilder<DependencyGraph, ComposerInfo> _composerBuilder;

    public ComposerClassBuilder(
        IBuilder<DependencyGraph, IReadOnlyDictionary<Injection, Root>> rootsBuilder,
        IBuilder<DependencyGraph, ComposerInfo> composerBuilder)
    {
        _rootsBuilder = rootsBuilder;
        _composerBuilder = composerBuilder;
    }

    public string Build(DependencyGraph dependencyGraph, CancellationToken cancellationToken)
    {
        var roots = _rootsBuilder.Build(dependencyGraph, cancellationToken);
        if (!roots.Any())
        {
            return string.Empty;
        }
        
        var composer = _composerBuilder.Build(dependencyGraph with { Roots = roots }, cancellationToken);
        if (!composer.Roots.Any())
        {
            return string.Empty;
        }

        var code = new LinesBuilder();
        code.AppendLine("// <auto-generated/>");
        
        BuildUsing(code, composer);

        var nsIndent = Disposables.Empty;
        if (!string.IsNullOrWhiteSpace(composer.Namespace))
        {
            code.AppendLine($"namespace {composer.Namespace}");
            code.AppendLine("{");
            nsIndent = code.Indent();
        }

        code.AppendLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        code.AppendLine($"partial class {composer.ClassName}{(composer.Singletons.Any() ? $": {DisposableTypeName}" : "")}");
        code.AppendLine("{");

        // Generate class members
        var membersCounter = 0;
        using (code.Indent())
        {
            membersCounter = BuildSingletonFields(membersCounter, code, composer);
            if (composer.Args.Any())
            {
                membersCounter = BuildArgFields(membersCounter, code, composer);
                membersCounter = BuildPrimaryConstructor(membersCounter, code, composer);
            }
            else
            {
                membersCounter = BuildDefaultConstructor(membersCounter, code, composer);
            }
            
            membersCounter = BuildChildConstructor(membersCounter, code, composer);
            membersCounter = BuildRoots(membersCounter, code, composer);
            membersCounter = BuildDisposeMethod(membersCounter, code, composer);
        }

        code.AppendLine("}");

        // ReSharper disable once InvertIf
        if (!string.IsNullOrWhiteSpace(composer.Namespace))
        {
            // ReSharper disable once RedundantAssignment
            nsIndent.Dispose();
            code.AppendLine("}");
        }

        return string.Join(Environment.NewLine, code);
    }

    private static void BuildUsing(LinesBuilder code, ComposerInfo composer)
    {
        if (!composer.UsingDirectives.Any())
        {
            return;
        }

        foreach (var usingDirective in composer.UsingDirectives)
        {
            code.AppendLine($"using {usingDirective};");
        }

        code.AppendLine();
    }

    private static int BuildDisposeMethod(
        int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        if (composer.Singletons.Any())
        {
            if (membersCounter > 0)
            {
                code.AppendLine();
            }

            code.AppendLine("public void Dispose()");
            code.AppendLine("{");
            using (code.Indent())
            {
                code.AppendLine($"lock ({Variable.DisposablesFieldName})");
                code.AppendLine("{");
                using (code.Indent())
                {
                    if (composer.DisposableSingletonsCount > 0)
                    {
                        code.AppendLine($"while ({Variable.DisposeIndexFieldName}-- >= 0)");
                        code.AppendLine("{");
                        using (code.Indent())
                        {
                            code.AppendLine("try");
                            code.AppendLine("{");
                            using (code.Indent())
                            {
                                code.AppendLine($"{Variable.DisposablesFieldName}[{Variable.DisposeIndexFieldName}].Dispose();");
                            }

                            code.AppendLine("}");
                            code.AppendLine("catch");
                            code.AppendLine("{");
                            using (code.Indent())
                            {
                                code.AppendLine("// ignored");
                            }

                            code.AppendLine("}");
                        }

                        code.AppendLine("}");
                        code.AppendLine();
                    }

                    foreach (var singletonField in composer.Singletons)
                    {
                        code.AppendLine(
                            singletonField.Node.Type.IsValueType
                                ? $"{singletonField.Name}Created = false;"
                                : $"{singletonField.Name} = null;");
                    }
                }

                code.AppendLine("}");
            }

            code.AppendLine("}");
        }

        return membersCounter;
    }

    private static int BuildRoots(
        int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        var roots = composer.Roots
            .OrderByDescending(i => i.IsPublic)
            .ThenBy(i => i.Node.Binding.Id)
            .ThenBy(i => i.PropertyName);

        foreach (var root in roots)
        {
            if (membersCounter > 0)
            {
                code.AppendLine();
            }

            code.AppendLines(BuildProperty(root.Injection.Type, root));
            membersCounter++;
        }

        return membersCounter;
    }

    private static int BuildArgFields(
        int membersCounter,
        LinesBuilder code,
        in ComposerInfo composer)
    {
        foreach (var arg in composer.Args)
        {
            code.AppendLine($"private {arg.Node.Type} {arg.Name};");
            membersCounter++;
        }

        return membersCounter;
    }

    private static int BuildSingletonFields(
        int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        if (!composer.Singletons.Any())
        {
            return membersCounter;
        }

        if (composer.DisposableSingletonsCount > 0)
        {
            // DisposeIndex field
            code.AppendLine($"private int {Variable.DisposeIndexFieldName};");
            membersCounter++;
        }
            
        // Disposables field
        code.AppendLine($"private {DisposableTypeName}[] {Variable.DisposablesFieldName};");
        membersCounter++;

        // Singleton fields
        foreach (var singletonField in composer.Singletons)
        {
            code.AppendLine($"private {singletonField.Node.Type} {singletonField.Name};");
            membersCounter++;

            if (!singletonField.Node.Type.IsValueType)
            {
                continue;
            }

            code.AppendLine($"private bool {singletonField.Name}Created;");
            membersCounter++;
        }

        return membersCounter;
    }

    private static int BuildChildConstructor(int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        if (membersCounter > 0)
        {
            code.AppendLine();
        }

        code.AppendLine($"internal {composer.ClassName}({composer.ClassName} {ParentComposerArgName})");
        code.AppendLine("{");
        if (composer.Singletons.Any())
        {
            using (code.Indent())
            {
                code.AppendLine($"lock ({ParentComposerArgName}.{Variable.DisposablesFieldName})");
                code.AppendLine("{");
                using (code.Indent())
                {
                    code.AppendLine($"{Variable.DisposablesFieldName} = new {DisposableTypeName}[{composer.DisposableSingletonsCount} - {ParentComposerArgName}.{Variable.DisposablesFieldName}.Length];");
                    foreach (var singletonField in composer.Singletons)
                    {
                        code.AppendLine($"{singletonField.Name} = {ParentComposerArgName}.{singletonField.Name};");

                        if (singletonField.Node.Type.IsValueType)
                        {
                            code.AppendLine($"{singletonField.Name}Created = {ParentComposerArgName}.{singletonField.Name}Created;");
                        }
                    }
                }

                code.AppendLine("}");
            }
        }

        if (composer.Args.Any())
        {
            using (code.Indent())
            {
                foreach (var argsField in composer.Args)
                {
                    code.AppendLine($"{argsField.Name} = {ParentComposerArgName}.{argsField.Name};");
                }
            }
        }

        code.AppendLine("}");
        membersCounter++;
        return membersCounter;
    }

    private static int BuildPrimaryConstructor(
        int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        if (!composer.Args.Any())
        {
            return membersCounter;
        }

        if (membersCounter > 0)
        {
            code.AppendLine();
        }

        code.AppendLine($"public {composer.ClassName}({string.Join(", ", composer.Args.Select(i => $"{i.Node.Type} {i.Node.Arg?.Source.ArgName}"))})");
        code.AppendLine("{");
        using (code.Indent())
        {
            code.AppendLine($"{Variable.DisposablesFieldName} = new {DisposableTypeName}[{composer.DisposableSingletonsCount}];");
            foreach (var arg in composer.Args)
            {
                if (arg.Node.Type.IsValueType)
                {
                    continue;
                }

                code.AppendLine($"if (System.Object.ReferenceEquals({arg.Node.Arg?.Source.ArgName}, null))");
                code.AppendLine("{");
                using (code.Indent())
                {
                    code.AppendLine($"throw new System.ArgumentNullException(\"{arg.Node.Arg?.Source.ArgName}\");");
                }

                code.AppendLine("}");
                code.AppendLine();
            }

            foreach (var arg in composer.Args)
            {
                code.AppendLine($"{arg.Name} = {arg.Node.Arg?.Source.ArgName};");
            }
        }

        code.AppendLine("}");
        membersCounter++;
        return membersCounter;
    }

    private static int BuildDefaultConstructor(
        int membersCounter,
        LinesBuilder code,
        ComposerInfo composer)
    {
        if (membersCounter > 0)
        {
            code.AppendLine();
        }

        code.AppendLine($"public {composer.ClassName}()");
        code.AppendLine("{");
        if (composer.Singletons.Any())
        {
            using (code.Indent())
            {
                code.AppendLine($"{Variable.DisposablesFieldName} = new {DisposableTypeName}[{composer.DisposableSingletonsCount}];");
            }
        }

        code.AppendLine("}");
        membersCounter++;
        return membersCounter;
    }
    
    private static ImmutableArray<Line> BuildProperty(ITypeSymbol type, Root root)
    {
        var code = new LinesBuilder();
        code.AppendLine($"{(root.IsPublic ? "public" : "private")} {type} {root.PropertyName}");
        code.AppendLine("{");
        using (code.Indent())
        {
            code.AppendLine(MethodImplOptions);
            code.AppendLine("get");
            code.AppendLine("{");
            using (code.Indent())
            {
                code.AppendLines(root.Lines);
            }

            code.AppendLine("}");
        }

        code.AppendLine("}");
        return code.Lines.ToImmutableArray();
    }
}
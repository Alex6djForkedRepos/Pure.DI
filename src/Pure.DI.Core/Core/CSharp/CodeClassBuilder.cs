namespace Pure.DI.Core.CSharp;

internal class CodeClassBuilder : IBuilder<ComposerCode, ComposerCode>
{
    private readonly IBuilder<ComposerCode, ComposerCode> _usingDeclarationsBuilder;
    private readonly ImmutableArray<IBuilder<ComposerCode, ComposerCode>> _codeBuilders;
    
    public CodeClassBuilder(
        [IoC.Tag(WellknownTag.CSharpUsingDeclarationsBuilder)] IBuilder<ComposerCode, ComposerCode> usingDeclarationsBuilder,
        [IoC.Tag(WellknownTag.CSharpSingletonFieldsBuilder)] IBuilder<ComposerCode, ComposerCode> singletonFieldsBuilder,
        [IoC.Tag(WellknownTag.CSharpArgFieldsBuilder)] IBuilder<ComposerCode, ComposerCode> argFieldsBuilder,
        [IoC.Tag(WellknownTag.CSharpPrimaryConstructorBuilder)] IBuilder<ComposerCode, ComposerCode> primaryConstructorBuilder,
        [IoC.Tag(WellknownTag.CSharpDefaultConstructorBuilder)] IBuilder<ComposerCode, ComposerCode> defaultConstructorBuilder,
        [IoC.Tag(WellknownTag.CSharpChildConstructorBuilder)] IBuilder<ComposerCode, ComposerCode> childConstructorBuilder,
        [IoC.Tag(WellknownTag.CSharpRootPropertiesBuilder)] IBuilder<ComposerCode, ComposerCode> rootPropertiesBuilder,
        [IoC.Tag(WellknownTag.CSharpDisposeMethodBuilder)] IBuilder<ComposerCode, ComposerCode> disposeMethodBuilder)
    {
        _usingDeclarationsBuilder = usingDeclarationsBuilder;
        _codeBuilders = ImmutableArray.Create(
            singletonFieldsBuilder,
            argFieldsBuilder,
            primaryConstructorBuilder,
            defaultConstructorBuilder,
            childConstructorBuilder,
            rootPropertiesBuilder,
            disposeMethodBuilder);
    }

    public ComposerCode Build(ComposerCode composer, CancellationToken cancellationToken)
    {
        var code = composer.Code;
        code.AppendLine("// <auto-generated/>");
        
        composer = _usingDeclarationsBuilder.Build(composer, cancellationToken);

        var nsIndent = Disposables.Empty;
        if (!string.IsNullOrWhiteSpace(composer.Namespace))
        {
            code.AppendLine($"namespace {composer.Namespace}");
            code.AppendLine("{");
            nsIndent = code.Indent();
        }

        code.AppendLine("[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        var implementingInterfaces = composer.Singletons.Any() ? $": {CodeConstants.DisposableTypeName}" : "";
        code.AppendLine($"partial class {composer.ClassName}{implementingInterfaces}");
        code.AppendLine("{");

        using (code.Indent())
        {
            // Generate class members
            foreach (var builder in _codeBuilders)
            {
                cancellationToken.ThrowIfCancellationRequested();
                composer = builder.Build(composer, cancellationToken);
            }
        }

        code.AppendLine("}");

        // ReSharper disable once InvertIf
        if (!string.IsNullOrWhiteSpace(composer.Namespace))
        {
            // ReSharper disable once RedundantAssignment
            nsIndent.Dispose();
            code.AppendLine("}");
        }

        return composer;
    }
}
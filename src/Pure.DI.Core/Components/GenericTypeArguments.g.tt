<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated/>
#if !PUREDI_API
#pragma warning disable
namespace Pure.DI
{    
<#
var baseTypes = new Dictionary<string, string> { 
    { "global::System.IDisposable", "TTDisposable#" },
    { "global::System.IComparable", "TTComparable#" },
    { "global::System.IComparable<T>", "TTComparable#<in T>" },
    { "global::System.IEquatable<T>", "TTEquatable#<T>" },
    { "global::System.Collections.Generic.IEnumerable<T>", "TTEnumerable#<out T>" },
    { "global::System.Collections.Generic.IEnumerator<T>", "TTEnumerator#<out T>" },
    { "global::System.Collections.Generic.ICollection<T>", "TTCollection#<T>" },
    { "global::System.Collections.Generic.IList<T>", "TTList#<T>" },
    { "global::System.Collections.Generic.ISet<T>", "TTSet#<T>" },
    { "global::System.Collections.Generic.IComparer<T>", "TTComparer#<in T>" },
    { "global::System.Collections.Generic.IEqualityComparer<T>", "TTEqualityComparer#<in T>" },
    { "global::System.Collections.Generic.IDictionary<TKey, TValue>", "TTDictionary#<TKey, TValue>" },
    { "global::System.IObservable<T>", "TTObservable#<out T>" },
    { "global::System.IObserver<T>", "TTObserver#<in T>" }
};
#>
<#for(var i = 0; i <= 32; i++) {#>
    /// <summary>
    /// Represents the generic type arguments marker for a reference type.
    /// </summary>
    [GenericTypeArgument]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal abstract class TT<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for a reference type with default constructor.
    /// </summary>
    [GenericTypeArgument]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal class TTC<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for an interface.
    /// </summary>
    [GenericTypeArgument]
    internal interface TTI<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for a value type.
    /// </summary>
    [GenericTypeArgument]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal struct TTS<#=i == 0 ? "" : i.ToString()#> { }

<#
    if (i > 8)
    {
        continue;
    }

    foreach(var baseType in baseTypes)
    {#>

#if !NET35 && !NET20
    /// <summary>
    /// Represents the generic type arguments marker for <c><#=baseType.Key.Replace('<','[').Replace('>',']')#></c>.
    /// </summary>
    [GenericTypeArgument]
    internal interface <#=baseType.Value.Replace("#", i == 0 ? "" : i.ToString())#>: <#=baseType.Key#> { }
#endif
    <#}#>
<#}#>
}
#pragma warning restore
#endif
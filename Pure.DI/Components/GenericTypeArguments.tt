<#@ import namespace="System.Collections.Generic" #>

// ReSharper disable InconsistentNaming
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable InvalidXmlDocComment
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable UnusedType.Global
// ReSharper disable ArrangeNamespaceBody
// ReSharper disable RedundantNameQualifier
#pragma warning disable 0436
#pragma warning disable 8714
namespace NS35EBD81B
{    
<#
var baseTypes = new Dictionary<string, string> { 
    { "System.IDisposable", "TTDisposable#" },
    { "System.IComparable", "TTComparable#" },
    { "System.IComparable<T>", "TTComparable#<in T>" },
    { "System.IEquatable<T>", "TTEquatable#<T>" },
    { "System.Collections.Generic.IEnumerable<T>", "TTEnumerable#<out T>" },
    { "System.Collections.Generic.IEnumerator<T>", "TTEnumerator#<out T>" },
    { "System.Collections.Generic.ICollection<T>", "TTCollection#<T>" },
    { "System.Collections.Generic.IList<T>", "TTList#<T>" },
    { "System.Collections.Generic.ISet<T>", "TTSet#<T>" },
    { "System.Collections.Generic.IComparer<T>", "TTComparer#<in T>" },
    { "System.Collections.Generic.IEqualityComparer<T>", "TTEqualityComparer#<in T>" },
    { "System.Collections.Generic.IDictionary<TKey, TValue>", "TTDictionary#<TKey, TValue>" },
    { "System.IObservable<T>", "TTObservable#<out T>" },
    { "System.IObserver<T>", "TTObserver#<in T>" }
};
#>
<#for(var i = 0; i <= 32; i++) {#>
    /// <summary>
    /// Represents the generic type arguments marker for a reference type.
    /// </summary>
    [GenericTypeArgument]
    internal abstract class TT<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for a reference type with default constructor.
    /// </summary>
    [GenericTypeArgument]
    internal class TTC<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for an interface.
    /// </summary>
    [GenericTypeArgument]
    internal interface TTI<#=i == 0 ? "" : i.ToString()#> { }

    /// <summary>
    /// Represents the generic type arguments marker for a value type.
    /// </summary>
    [GenericTypeArgument]
    internal struct TTS<#=i == 0 ? "" : i.ToString()#> { }

<#
    if (i > 8)
    {
        continue;
    }

    foreach(var baseType in baseTypes)
    {#>
/// <summary>
#if !NET35
    /// Represents the generic type arguments marker for <c><#=baseType.Key.Replace('<','[').Replace('>',']')#></c>.
    /// </summary>
    [GenericTypeArgument]
    internal interface <#=baseType.Value.Replace("#", i == 0 ? "" : i.ToString())#>: <#=baseType.Key#> { }
#endif
    <#}#>
<#}#>
}

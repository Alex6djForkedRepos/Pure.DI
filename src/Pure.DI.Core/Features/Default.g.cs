// <auto-generated/>
namespace Pure.DI
{
    internal static class Default
    {
        private static void Setup()
        {
            DI.Setup("", CompositionKind.Global)
                .TypeAttribute<TypeAttribute>()
                .TagAttribute<TagAttribute>()
                .OrdinalAttribute<OrdinalAttribute>()
                .Bind<System.Func<TT>>()
                    .To(ctx => new System.Func<TT>(() =>
                    {
                        TT value;
                        ctx.Inject<TT>(ctx.Tag, out value);
                        return value;
                    }))
                .Bind<System.Lazy<TT>>()
                    .To(ctx =>
                    {
                        System.Func<TT> func;
                        ctx.Inject<System.Func<TT>>(ctx.Tag, out func);
                        return new System.Lazy<TT>(func, true);
                    })
                .Bind<System.Lazy<TT, TT1>>()
                    .To(ctx =>
                    {
                        System.Func<TT> func;
                        ctx.Inject<System.Func<TT>>(ctx.Tag, out func);
                        TT1 metadata;
                        ctx.Inject<TT1>(ctx.Tag, out metadata);
                        return new System.Lazy<TT, TT1>(func, metadata, true);
                    })
                .Bind<System.Threading.Tasks.Task<TT>>()
                    .To(ctx =>
                    {
                        System.Func<TT> func;
                        ctx.Inject<System.Func<TT>>(ctx.Tag, out func);
                        return new System.Threading.Tasks.Task<TT>(func);
                    })

                // Collections
                .Bind<System.Memory<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Memory<TT>(arr);
                    })
                .Bind<System.ReadOnlyMemory<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.ReadOnlyMemory<TT>(arr);
                    })
                .Bind<System.Collections.Generic.ICollection<TT>>()
                .Bind<System.Collections.Generic.IList<TT>>()
                .Bind<System.Collections.Generic.List<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Collections.Generic.List<TT>(arr);
                    })
                .Bind<System.Collections.Generic.IReadOnlyCollection<TT>>()
                .Bind<System.Collections.Generic.IReadOnlyList<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return arr;
                    })
                .Bind<System.Collections.Generic.ISet<TT>>()
                .Bind<System.Collections.Generic.HashSet<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Collections.Generic.HashSet<TT>(arr);
                    })
                .Bind<System.Collections.Generic.SortedSet<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Collections.Generic.SortedSet<TT>(arr);
                    })
                .Bind<System.Collections.Generic.Queue<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Collections.Generic.Queue<TT>(arr);
                    })
                .Bind<System.Collections.Generic.Stack<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return new System.Collections.Generic.Stack<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.ImmutableArray<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableArray.Create<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.IImmutableList<TT>>()
                .Bind<System.Collections.Immutable.ImmutableList<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableList.Create<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.IImmutableSet<TT>>()
                .Bind<System.Collections.Immutable.ImmutableHashSet<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableHashSet.Create<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.ImmutableSortedSet<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableSortedSet.Create<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.IImmutableQueue<TT>>()
                .Bind<System.Collections.Immutable.ImmutableQueue<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableQueue.Create<TT>(arr);
                    })
                .Bind<System.Collections.Immutable.IImmutableStack<TT>>()
                .Bind<System.Collections.Immutable.ImmutableStack<TT>>()
                    .To(ctx =>
                    {
                        ctx.Inject<TT[]>(out var arr);
                        return System.Collections.Immutable.ImmutableStack.Create<TT>(arr);
                    });
        }
    }
}